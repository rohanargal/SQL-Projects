create database world_layoffs;

-- Data Cleaning.
select * from layoffs;

-- Duplicates, Null vales, remove column, standardize values.

-- creating copy table.
create table layoffs_stagging
like layoffs;

insert layoffs_stagging
select * from layoffs;

select * from layoffs_stagging;


-- checking for duplicates. 
select * from layoffs_stagging;
select *, row_number() over(partition by company, industry, total_laid_off, percentage_laid_off, `date`) as row_numbr from layoffs_stagging; -- remove if row_number is 2

-- create duplicate _cte
with duplicate_cte as
(
select *, row_number() over(partition by company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_numbr 
 from layoffs_stagging
)
select * from duplicate_cte where row_numbr >1; -- the retreive data from the qurey are duplicates


-- removing duplicates
CREATE TABLE `layoffs_stagging_2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `ro_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

select * from layoffs_stagging_2;

insert layoffs_stagging_2
select *, row_number() over(partition by company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_numbr 
 from layoffs_stagging;
 
 select * from layoffs_stagging_2;
 select* from layoffs_stagging_2 where ro_num >1;
 
 delete from layoffs_stagging_2 where ro_num >1;
 select * from layoffs_stagging_2;


-- STANDARDISING 
select company, trim(company) from layoffs_stagging_2;

update layoffs_stagging_2
set company = trim(company);

select * from layoffs_stagging_2;

--  --  --  
select distinct industry from layoffs_stagging_2 ;
update layoffs_stagging_2
set industry = 'Crypto'
where industry like 'Crypto%';

select distinct industry from layoffs_stagging_2;

-- --- 

select distinct country from layoffs_stagging_2;
update layoffs_stagging_2
set country = 'United States'
where country like 'United States%';

select distinct country from layoffs_stagging_2;

-- changing date text to date type 
select `date`, str_to_date(`date`, '%m/%d/%Y')  as date_coln from layoffs_stagging_2;

update layoffs_stagging_2
set `date` = str_to_date(`date`, '%m/%d/%Y');

-- Changing data type
alter table layoffs_stagging_2
modify column `date` date;

select * from layoffs_stagging_2;


-- 4. remove any columns and rows we need to
UPDATE world_layoffs.layoffs_stagging_2
SET industry = NULL
WHERE industry = '';

SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE total_laid_off IS NULL;


SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- Delete Useless data we can't really use
DELETE FROM world_layoffs.layoffs_stagging_2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

SELECT * 
FROM world_layoffs.layoffs_stagging_2;

ALTER TABLE layoffs_stagging_2
DROP COLUMN ro_num;


SELECT * 
FROM world_layoffs.layoffs_stagging_2;



SELECT * 
FROM world_layoffs.layoffs_stagging_2;

-- if we look at industry it looks like we have some null and empty rows, let's take a look at these
SELECT DISTINCT industry
FROM world_layoffs.layoffs_stagging_2
ORDER BY industry;

SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;

-- let's take a look at these
SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE company LIKE 'Bally%';
-- nothing wrong here
SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE company LIKE 'airbnb%';

-- it looks like airbnb is a travel, but this one just isn't populated.
-- I'm sure it's the same for the others. What we can do is
-- write a query that if there is another row with the same company name, it will update it to the non-null industry values
-- makes it easy so if there were thousands we wouldn't have to manually check them all

-- we should set the blanks to nulls since those are typically easier to work with
UPDATE world_layoffs.layoffs_stagging_2
SET industry = NULL
WHERE industry = '';

-- now if we check those are all null

SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;

-- now we need to populate those nulls if possible

UPDATE layoffs_stagging_2 t1
JOIN layoffs_stagging_2 t2
ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;

-- and if we check it looks like Bally's was the only one without a populated row to populate this null values
SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;





-- Data Exploration 
-- Looking at Percentage to see how big these layoffs were
SELECT MAX(percentage_laid_off),  MIN(percentage_laid_off)
FROM world_layoffs.layoffs_stagging_2
WHERE  percentage_laid_off IS NOT NULL;

-- Which companies had 1 which is basically 100 percent of they company laid off
SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE  percentage_laid_off = 1;
-- these are mostly startups it looks like who all went out of business during this time

-- if we order by funcs_raised_millions we can see how big some of these companies were
SELECT *
FROM world_layoffs.layoffs_stagging_2
WHERE  percentage_laid_off = 1
ORDER BY funds_raised_millions DESC;

-- Companies with the biggest single Layoff

SELECT company, total_laid_off
FROM world_layoffs.layoffs_stagging_2
ORDER BY 2 DESC
LIMIT 5;

-- Companies with the most Total Layoffs
SELECT company, SUM(total_laid_off)
FROM world_layoffs.layoffs_stagging_2
GROUP BY company
ORDER BY 2 DESC
LIMIT 10;



-- by location
SELECT location, SUM(total_laid_off)
FROM world_layoffs.layoffs_stagging_2
GROUP BY location
ORDER BY 2 DESC
LIMIT 10;

-- this it total in the past 3 years or in the dataset

SELECT country, SUM(total_laid_off)
FROM world_layoffs.layoffs_stagging_2
GROUP BY country
ORDER BY 2 DESC;

SELECT YEAR(date), SUM(total_laid_off)
FROM world_layoffs.layoffs_stagging_2
GROUP BY YEAR(date)
ORDER BY 1 ASC;


SELECT industry, SUM(total_laid_off)
FROM world_layoffs.layoffs_stagging_2
GROUP BY industry
ORDER BY 2 DESC;


SELECT stage, SUM(total_laid_off)
FROM world_layoffs.layoffs_stagging_2
GROUP BY stage
ORDER BY 2 DESC;



-- Earlier we looked at Companies with the most Layoffs. Now let's look at that per year.

WITH Company_Year AS 
(
  SELECT company, YEAR(date) AS years, SUM(total_laid_off) AS total_laid_off
  FROM layoffs_stagging_2
  GROUP BY company, YEAR(date)
)
, Company_Year_Rank AS (
  SELECT company, years, total_laid_off, DENSE_RANK() OVER (PARTITION BY years ORDER BY total_laid_off DESC) AS ranking
  FROM Company_Year
)
SELECT company, years, total_laid_off, ranking
FROM Company_Year_Rank
WHERE ranking <= 3
AND years IS NOT NULL
ORDER BY years ASC, total_laid_off DESC;




-- Rolling Total of Layoffs Per Month
SELECT SUBSTRING(date,1,7) as dates, SUM(total_laid_off) AS total_laid_off
FROM layoffs_stagging_2
GROUP BY dates
ORDER BY dates ASC;

-- now use it in a CTE so we can query off of it
WITH DATE_CTE AS 
(
SELECT SUBSTRING(date,1,7) as dates, SUM(total_laid_off) AS total_laid_off
FROM layoffs_stagging_2
GROUP BY dates
ORDER BY dates ASC
)
SELECT dates, SUM(total_laid_off) OVER (ORDER BY dates ASC) as rolling_total_layoffs
FROM DATE_CTE
ORDER BY dates ASC;